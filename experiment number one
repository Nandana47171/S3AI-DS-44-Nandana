// Nandana Ramachandran
// S3 CS(AI)
// Roll no:44
PROGRAM
#include <stdio.h>
#include <stdlib.h>


struct Polynomial {
    int coefficient;
    int exponent;
    struct Polynomial* next;
};


struct Polynomial* newTerm(int coefficient, int exponent) {
    struct Polynomial* term = (struct Polynomial*)malloc(sizeof(struct Polynomial));
    if (!term) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    term->coefficient = coefficient;
    term->exponent = exponent;
    term->next = NULL;
    return term;
}


void insertTerm(struct Polynomial** poly, int coefficient, int exponent) {
    struct Polynomial* new_node = newTerm(coefficient, exponent);
    if (*poly == NULL || (*poly)->exponent < exponent) {
        new_node->next = *poly;
        *poly = new_node;
    } else {
        struct Polynomial* temp = *poly;
        while (temp->next != NULL && temp->next->exponent > exponent) {
            temp = temp->next;
        }
        
        if (temp->next != NULL && temp->next->exponent == exponent) {
            temp->next->coefficient += coefficient;
            free(new_node);  
        } else {
            new_node->next = temp->next;
            temp->next = new_node;
        }
    }
}


struct Polynomial* addPolynomials(struct Polynomial* poly1, struct Polynomial* poly2) {
    struct Polynomial* result = NULL;
    
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            insertTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            insertTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            int sum = poly1->coefficient + poly2->coefficient;
            if (sum != 0) {
                insertTerm(&result, sum, poly1->exponent);
            }
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }
    
    
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }
    
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}


void displayPolynomial(struct Polynomial* poly) {
    if (poly == NULL) {
        printf("0\n");
        return;
    }

    while (poly != NULL) {
        if (poly->coefficient > 0 && poly != poly) {
            printf(" + ");
        }
        printf("%dx^%d", poly->coefficient, poly->exponent);
        poly = poly->next;
    }
    printf("\n");
}

int main() {
    struct Polynomial* poly1 = NULL;
    struct Polynomial* poly2 = NULL;

    
    insertTerm(&poly1, 3, 3);
    insertTerm(&poly1, 5, 2);
    insertTerm(&poly1, 6, 1);
    insertTerm(&poly1, 2, 0);
    
  
    insertTerm(&poly2, 4, 3);
    insertTerm(&poly2, 2, 2);
    insertTerm(&poly2, 1, 0);

    printf("First Polynomial: ");
    displayPolynomial(poly1);

    printf("Second Polynomial: ");
    displayPolynomial(poly2);

   
    struct Polynomial* sum = addPolynomials(poly1, poly2);

    printf("Sum of Polynomials: ");
    displayPolynomial(sum);

    return 0;
}


   
   

    
    
    

