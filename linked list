#include <stdio.h>
#include <stdlib.h>


typedef struct SinglyNode {
    int data;
    struct SinglyNode* next;
} SinglyNode;


typedef struct DoublyNode {
    int data;
    struct DoublyNode* prev;
    struct DoublyNode* next;
} DoublyNode;


typedef struct CircularNode {
    int data;
    struct CircularNode* next;
} CircularNode;



SinglyNode* createSinglyNode(int data) {
    SinglyNode* newNode = (SinglyNode*)malloc(sizeof(SinglyNode));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertSingly(SinglyNode **head, int data) {
    SinglyNode* newNode = createSinglyNode(data);
    newNode->next = *head;
    *head = newNode;
}

void deleteSingly(SinglyNode **head, int data) {
    SinglyNode* temp = *head, *prev = NULL;
    if (temp != NULL && temp->data == data) {
        *head = temp->next;  
        free(temp);
        return;
    }
    while (temp != NULL && temp->data != data) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) return;  
    prev->next = temp->next;
    free(temp);
}

void displaySingly(SinglyNode *head) {
    SinglyNode* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}


DoublyNode* createDoublyNode(int data) {
    DoublyNode* newNode = (DoublyNode*)malloc(sizeof(DoublyNode));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

void insertDoubly(DoublyNode **head, int data) {
    DoublyNode* newNode = createDoublyNode(data);
    newNode->next = *head;
    if (*head != NULL) {
        (*head)->prev = newNode;
    }
    *head = newNode;
}

void deleteDoubly(DoublyNode **head, int data) {
    DoublyNode* temp = *head;
    if (temp != NULL && temp->data == data) {
        *head = temp->next;
        if (*head != NULL) {
            (*head)->prev = NULL;
        }
        free(temp);
        return;
    }
    while (temp != NULL && temp->data != data) {
        temp = temp->next;
    }
    if (temp == NULL) return;
    if (temp->prev != NULL) {
        temp->prev->next = temp->next;
    }
    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }
    free(temp);
}

void displayDoubly(DoublyNode *head) {
    DoublyNode* temp = head;
    while (temp != NULL) {
        printf("%d <-> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}



CircularNode* createCircularNode(int data) {
    CircularNode* newNode = (CircularNode*)malloc(sizeof(CircularNode));
    newNode->data = data;
    newNode->next = newNode;  
    return newNode;
}

void insertCircular(CircularNode **head, int data) {
    CircularNode* newNode = createCircularNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        CircularNode* temp = *head;
        while (temp->next != *head) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = *head;
    }
}

void deleteCircular(CircularNode **head, int data) {
    if (*head == NULL) return;
    CircularNode* temp = *head;
    CircularNode* prev = NULL;

    
    if (temp->data == data) {
        prev = *head;
        while (prev->next != *head) {
            prev = prev->next;
        }
        if (*head == (*head)->next) { 
            free(*head);
            *head = NULL;
        } else {
            prev->next = temp->next;
            *head = temp->next;
            free(temp);
        }
        return;
    }

    
    while (temp->next != *head && temp->data != data) {
        prev = temp;
        temp = temp->next;
    }

    if (temp->data == data) {
        prev->next = temp->next;
        free(temp);
    }
}

void displayCircular(CircularNode *head) {
    if (head == NULL) return;
    CircularNode* temp = head;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("...\n");
}


int main() {
    SinglyNode *singlyHead = NULL;
    DoublyNode *doublyHead = NULL;
    CircularNode *circularHead = NULL;

    
    insertSingly(&singlyHead, 10);
    insertSingly(&singlyHead, 20);
    insertSingly(&singlyHead, 30);
    printf("Singly Linked List: ");
    displaySingly(singlyHead);
    deleteSingly(&singlyHead, 20);
    printf("After Deleting 20: ");
    displaySingly(singlyHead);

    
    insertDoubly(&doublyHead, 40);
    insertDoubly(&doublyHead, 50);
    insertDoubly(&doublyHead, 60);
    printf("\nDoubly Linked List: ");
    displayDoubly(doublyHead);
    deleteDoubly(&doublyHead, 50);
    printf("After Deleting 50: ");
    displayDoubly(doublyHead);

    
    insertCircular(&circularHead, 70);
    insertCircular(&circularHead, 80);
    insertCircular(&circularHead, 90);
    printf("\nCircular Linked List: ");
    displayCircular(circularHead);
    deleteCircular(&circularHead, 80);
    printf("After Deleting 80: ");
    displayCircular(circularHead);

    return 0;
}

