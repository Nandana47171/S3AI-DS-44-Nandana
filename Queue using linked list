#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};


struct Queue {
    struct Node* front;
    struct Node* rear;
};


struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}


void initializeQueue(struct Queue* queue) {
    queue->front = queue->rear = NULL;
}


int isEmpty(struct Queue* queue) {
    return queue->front == NULL;
}


void enqueue(struct Queue* queue, int data) {
    struct Node* newNode = createNode(data);

    if (isEmpty(queue)) {
        queue->front = queue->rear = newNode;
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
    printf("%d enqueued to queue\n", data);
}


int dequeue(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        return -1; 
    }

    struct Node* temp = queue->front;
    int data = temp->data;
    queue->front = queue->front->next;

  
    if (queue->front == NULL) {
        queue->rear = NULL;
    }

    free(temp);
    return data;
}


void displayQueue(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        return;
    }

    struct Node* temp = queue->front;
    printf("Queue elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}


int main() {
    struct Queue queue;
    initializeQueue(&queue);

   
    enqueue(&queue, 10);
    enqueue(&queue, 20);
    enqueue(&queue, 30);

   
    displayQueue(&queue);

    
    printf("%d dequeued from queue\n", dequeue(&queue));
    printf("%d dequeued from queue\n", dequeue(&queue));

    
    displayQueue(&queue);

    return 0;
