#include <stdio.h>
#include <stdlib.h>
 {
    int data;
    struct Node *next;
} Node;


typedef struct Queue {
    Node *front;
    Node *rear;
} Queue;

Node* createNode(int data) {
    Node *newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}


void initQueue(Queue *q) {
    q->front = NULL;
    q->rear = NULL;
}


int isEmpty(Queue *q) {
    return q->front == NULL;
}


void enqueue(Queue *q, int data) {
    Node *newNode = createNode(data);
    if (isEmpty(q)) {
        q->front = newNode;
        q->rear = newNode;
    } else {
        q->rear->next = newNode;
        q->rear = newNode;
    }
    printf("Enqueued: %d\n", data);
}


int dequeue(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty, cannot dequeue.\n");
        return -1; 
    }
    Node *temp = q->front;
    int data = temp->data;
    q->front = q->front->next;
    if (q->front == NULL) {
        q->rear = NULL;
    }
    free(temp);
    printf("Dequeued: %d\n", data);
    return data;
}


void displayQueue(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty.\n");
        return;
    }
    Node *temp = q->front;
    printf("Queue: ");
    while (temp) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    Queue q;
    initQueue(&q);

   
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    displayQueue(&q);

    
    dequeue(&q);
    displayQueue(&q);

    enqueue(&q, 40);
    displayQueue(&q);

    dequeue(&q);
    dequeue(&q);
    dequeue(&q); 

   
    displayQueue(&q);

    return 0;
}
