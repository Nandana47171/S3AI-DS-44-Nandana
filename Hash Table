#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TABLE_SIZE 10


typedef struct Node {
    int key;
    int value;
    struct Node* next;
} Node;


typedef struct HashTable {
    Node* table[TABLE_SIZE];
} HashTable;


int hash(int key) {
    return key % TABLE_SIZE;
}


void initHashTable(HashTable* ht) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        ht->table[i] = NULL; 
    }
}

Node* createNode(int key, int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->key = key;
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}


void insert(HashTable* ht, int key, int value) {
    int index = hash(key);
    Node* newNode = createNode(key, value);

    
    newNode->next = ht->table[index];
    ht->table[index] = newNode;
}


int search(HashTable* ht, int key) {
    int index = hash(key);
    Node* current = ht->table[index];
    
    while (current != NULL) {
        if (current->key == key) {
            return current->value; 
        }
        current = current->next;
    }
    
    return -1;
}


void delete(HashTable* ht, int key) {
    int index = hash(key);
    Node* current = ht->table[index];
    Node* prev = NULL;

    while (current != NULL) {
        if (current->key == key) {
            if (prev == NULL) {
                
                ht->table[index] = current->next;
            } else {
               
                prev->next = current->next;
            }
            free(current);
            return;
        }
        prev = current;
        current = current->next;
    }

    printf("Key %d not found for deletion.\n", key);
}


void printHashTable(HashTable* ht) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        Node* current = ht->table[i];
        if (current != NULL) {
            printf("Index %d: ", i);
            while (current != NULL) {
                printf("(%d, %d) -> ", current->key, current->value);
                current = current->next;
            }
            printf("NULL\n");
        }
    }
}

int main() {
    HashTable ht;
    initHashTable(&ht);

   
    insert(&ht, 1, 100);
    insert(&ht, 2, 200);
    insert(&ht, 12, 300);  
    insert(&ht, 22, 400); 
    insert(&ht, 32, 500);  
    
  
    printf("Hash Table after inserts:\n");
    printHashTable(&ht);

  
    int key = 12;
    int result = search(&ht, key);
    if (result != -1) {
        printf("Key %d found with value %d.\n", key, result);
    } else {
        printf("Key %d not found.\n", key);
    }

    
    key = 2;
    delete(&ht, key);
    printf("Hash Table after deleting key %d:\n", key);
    printHashTable(&ht);

    
    result = search(&ht, key);
    if (result != -1) {
        printf("Key %d found with value %d.\n", key, result);
    } else {
        printf("Key %d not found.\n", key);
    }

    return 0;
}
