// Nandana Ramachandran
// roll no:44
#include <stdio.h>
#include <stdlib.h>


struct StackNode {
    int data;
    struct StackNode* next;
};


struct StackNode* newNode(int data) {
    struct StackNode* node = (struct StackNode*)malloc(sizeof(struct StackNode));
    if (!node) {
        printf("Memory allocation failed!\n");
        exit(1); 
    }
    node->data = data;
    node->next = NULL;
    return node;
}


void push(struct StackNode** top, int data) {
    struct StackNode* node = newNode(data);
    node->next = *top; 
    *top = node;       
    printf("%d pushed to stack\n", data);
}


int pop(struct StackNode** top) {
    if (*top == NULL) {
        printf("Stack underflow! Stack is empty.\n");
        return -1; 
    }
    
    struct StackNode* temp = *top;
    int poppedData = temp->data;
    
    *top = (*top)->next;  
    free(temp);          
    
    return poppedData;
}

int peek(struct StackNode* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
        return -1; 
    }
    return top->data;
}


int isEmpty(struct StackNode* top) {
    return (top == NULL);
}

void display(struct StackNode* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
        return;
    }
    
    struct StackNode* temp = top;
    printf("Stack contents: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

 
int main() {
    struct StackNode* stack = NULL;  

    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);
    
    display(stack);  
    
    printf("%d popped from stack\n", pop(&stack));   
    display(stack);   
    
    printf("Top element is %d\n", peek(stack)); 
    
    push(&stack, 40);
    display(stack);  
    while (!isEmpty(stack)) {
        printf("%d popped from stack\n", pop(&stack));
    }
